<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/10/hello-world/"/>
      <url>2021/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github 搭建博客 (超级详细版，精细入微)</title>
      <link href="2021/01/31/hexo-github-da-jian-bo-ke-chao-ji-xiang-xi-ban-jing-xi-ru-wei/"/>
      <url>2021/01/31/hexo-github-da-jian-bo-ke-chao-ji-xiang-xi-ban-jing-xi-ru-wei/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>几个月前偶然间了解到了 Hexo 这个静态博客网站，很适合那些喜欢写作的朋友们，最重要的是它是免费的，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。直到今天，这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来，能为那些博客小石榴们提供一些帮助吧，如果有错的话，请给我留言，我会及时修改，废话不多说，直接上教程。</p><blockquote><p><strong>如果下面的教程有错误之处，请在评论区留言，收到后，我会尽快修改，谢谢支持！</strong></p></blockquote><h1 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h1><blockquote><p>本文系统环境信息：Win10 专业版，64 位（10.0 版本 18362）</p><p>Node.js：12.13.0 Git：2.24.0</p><p>修改配置文件要用到的软件（可选）：</p><ol><li><a href="https://code.visualstudio.com/">Visual Studio Code</a>（适合有开发基础的程序员，非常好用）</li><li>Sublime Text3，可免费使用，<a href="https://pan.baidu.com/s/1uKA-aBHm_CsmJI5GolrV1Q">百度网盘</a>（提取码：mh0y）</li><li><a href="https://notepad-plus-plus.org/downloads/">NodePad++</a> 7.8.1（最新的，也可以在官网选择其他版本）</li></ol></blockquote><h2 id="1-下载-Git-和-Node-js"><a href="#1-下载-Git-和-Node-js" class="headerlink" title="1. 下载 Git 和 Node.js"></a>1. 下载 Git 和 Node.js</h2><h3 id="1-1-Node-js-的安装与配置"><a href="#1-1-Node-js-的安装与配置" class="headerlink" title="1.1 Node.js 的安装与配置"></a>1.1 Node.js 的安装与配置</h3><p>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/nodejs-0.png" alt="Node.js下载以及版本的选择"></a></p><p>Node.js 下载以及版本的选择</p><p>下载好与电脑系统对应的安装程序后，开始安装流程：</p><ol><li>打开下载好的 Node.js 安装程序，点击 Next，进行下一步的安装；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-1.png" alt="img"></a></p><p>img</p><ol><li>将”I accept the terms in the License Agreement” 前面的复选框勾选，同意安装协议，再点击 Next，进行下一步操作；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-2.png" alt="img"></a></p><p>img</p><ol><li>选择 Node.js 安装程序的安装位置，在这里我以”C:\Program Files\nodejs” 为例，点击 Next，进入下一步操作；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-3.png" alt="img"></a></p><p>img</p><ol><li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击 Next，进入下一步操作；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-4.png" alt="img"></a></p><p>img</p><ol><li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如 python，C/C++ 等，点击 Next，进入下一步；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-5.png" alt="img"></a></p><p>img</p><ol><li>点击”Install”，等待 Node.js 安装完成；</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-6.png" alt="img"></a></p><p>img</p><ol><li>当看到下图所显示的情况，Node.js 就成功安装完毕。</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-7.png" alt="img"></a></p><p>img</p><ol><li>验证安装，并测试 Node.js 是否加入环境变量，当出现如下图的情况，Node.js 安装大功告成。</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-8.png" alt="img"></a></p><p>img</p><p>如果执行 <code>node -v</code> 报错的话，那么手动将 Node.js 的安装路径添加到环境变量中，右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117191107.png" alt="img"></a></p><p>img</p><p>选中 path，或者双击，然后将你 node.js 的安装路径放在 path 变量值的最后面，如果添加之前 path 值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开 cmd（Win+R），执行 <code>node -v</code>，看是否成功。</p><ol><li>设置 npm 的镜像源：</li></ol><pre><code># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org# 另一种方式，编辑 ~/.npmrc 加入下面内容registry = https://registry.npm.taobao.org</code></pre><ol><li>设置 npm 的内置路径 ——&gt; 全局模块路径和缓存路径（<em>可选</em>）</li></ol><p>如果不改变内置路径也可，除非你的 C 盘空间足够 bigger，这一步可以略过，不改变的话，它的路径在：</p><blockquote><p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667">jyjin 的 node 环境变量配置，npm 环境变量配置</a></p></blockquote><ul><li>npm 包全局目录：</li></ul><pre><code>C:/Users/[username]/AppData/Roaming/npm/node_modules</code></pre><ul><li>npm 包全局命令目录：</li></ul><pre><code>C:/Users/[username]/AppData/Roaming/npm</code></pre><ul><li>npm 实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>prefix</code> 值</li><li>npm 包全局 cache 目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的 <code>cache</code> 值</li></ul><p>首先在你 Node.js 的安装位置，新建两个文件夹，<code>node_global</code> 和 <code>node_cache</code>，我的路径是：</p><pre><code>C:\Program Files\nodejs\node_globalC:\Program Files\nodejs\node_cache</code></pre><p>然后分别执行的命令就是：</p><pre><code>npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</code></pre><p>然后在配置环境变量，右击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到 path 变量进行修改，修改值如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-11.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/node-12.png" alt="img"></a></p><p>img</p><p>然后就大功告成了，Node.js 就安装完毕了，下面开始 Git 安装。👇👇👇</p><h3 id="1-2-Git-的安装与配置"><a href="#1-2-Git-的安装与配置" class="headerlink" title="1.2 Git 的安装与配置"></a>1.2 Git 的安装与配置</h3><p>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117193737.png" alt="img"></a></p><p>img</p><ol><li>下载好 Git 的安装包，开始安装，打开安装包，出现如图的界面，点击 Next：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-1.png" alt="img"></a></p><p>img</p><ol><li>选择你要安装的位置，我以 C 盘为例，路径为图中所示，安装到其他位置的话，点击 Browse，选择你要安装的位置，然后点击 Next，进入下一步：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-2.png" alt="img"></a></p><p>img</p><ol><li>选择你是否创建桌面快捷放方式，其他默认即可，点击 Next，进入下一步：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-3.png" alt="img"></a></p><p>img</p><ol><li>是否将 Git 快捷方式的目录加入开是菜单栏</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-4.png" alt="img"></a></p><p>img</p><ol><li>这个是选择文本编辑器的方式，默认是 Vim，也可以选择其他的方式，自主选择，在这里我选择的 Vim 默认方式。选择好文本编辑器的方式后，点击 Next，进入下一个流程：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-5.png" alt="img"></a></p><p>img</p><ol><li>选择安装 Git 时对环境变量 PATH 的影响，第一种影响较小，第三种会影响到 Windows 的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-6.png" alt="img"></a></p><p>img</p><ol><li>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-7.png" alt="img"></a></p><p>img</p><ol><li>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-8.png" alt="img"></a></p><p>img</p><ol><li>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-9.png" alt="img"></a></p><p>img</p><ol><li>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-10.png" alt="img"></a></p><p>img</p><ol><li>安装完成</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-11.png" alt="img"></a></p><p>img</p><ol><li>回到桌面，点击鼠标右键，会出现两个选项 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-12.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/git-13.png" alt="img"></a></p><p>img</p><h1 id="二、Github-注册以及-Github-Pages-创建"><a href="#二、Github-注册以及-Github-Pages-创建" class="headerlink" title="二、Github 注册以及 Github Pages 创建"></a>二、Github 注册以及 Github Pages 创建</h1><ol><li>打开 Github <a href="https://github.com/">官网首页</a>，点击右上角的 <strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ol><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117203432.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117203432.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204639.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204639.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204955.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117204955.png" alt="img"></a></p><p>img</p><p>验证完成后，点击 Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择 Free，下方的两个选项可选可不选，点击 <strong>Continue</strong> 继续：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117211431.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117211431.png" alt="img"></a></p><p>img</p><p>这时 Github 会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212721.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212721.png" alt="img"></a></p><p>img</p><p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code> 为描述仓库，自定义写，填写必要的描述，也可不填。勾选 <code>Initialize this repository with a README</code> 点击 <code>Creat repository</code> 进行创建。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212538.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117212538.png" alt="img"></a></p><p>img</p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213321.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213321.png" alt="img"></a></p><p>img</p><p>我们来测试一下，点击 <code>Create new file</code>，出现如下界面，然后命名文件名为 <code>index.html</code>，在填写如图的内容，再点击 <code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址 <code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214029.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214029.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213957.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117213957.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214450.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117214450.png" alt="img"></a></p><p>img</p><p>至此，Github 的注册以及 Github Pages 已经创建完成了。</p><h1 id="三、配置-Git-用户名和邮箱"><a href="#三、配置-Git-用户名和邮箱" class="headerlink" title="三、配置 Git 用户名和邮箱"></a>三、配置 Git 用户名和邮箱</h1><p>在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，会出现一个界面如下图所示：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117215118.png" alt="img"></a></p><p>img</p><p>然后分别输入下面的两个命令，并回车：</p><pre><code>git config --global user.name &quot;此处填写你注册时的用户名&quot;git config --global user.email &quot;此处填写你注册时的邮箱&quot;# 一般只要不报错，可以跳过下面寻找.gitconfig文件</code></pre><p>然后找到<code>.gitconfig</code> 文件，文件存放位置在 <code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117220016.png" alt="img"></a></p><p>img</p><h1 id="四、本地安装-hexo-静态博客框架以及发布到-Github-Pages"><a href="#四、本地安装-hexo-静态博客框架以及发布到-Github-Pages" class="headerlink" title="四、本地安装 hexo 静态博客框架以及发布到 Github Pages"></a>四、本地安装 hexo 静态博客框架以及发布到 Github Pages</h1><ol><li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为 blogtest 的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令，：</li></ol><pre><code># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹cd &lt;新建文件夹的名称&gt;npm install  # 安装博客所需要的依赖文件</code></pre><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221129.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221129.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221144.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221144.png" alt="img"></a></p><p>img</p><p>等待运行完成，此时文件夹中多了许多文件。 <strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用 Git Bash 运行。</strong> 此时 Hexo 框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><pre><code>hexo ghexo s</code></pre><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221157.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221157.png" alt="img"></a></p><p>img</p><p>浏览器中打开 <a href="http://xn--localhost:4000127-kd18a6585a.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。/">http://localhost:4000 或者 127.0.0.1:4000，可以看到一个网页，说明 Hexo 博客已经成功在本地运行。</a></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221206.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117221206.png" alt="img"></a></p><p>img</p><h2 id="1-本地博客发布到-Github-Pages"><a href="#1-本地博客发布到-Github-Pages" class="headerlink" title="1. 本地博客发布到 Github Pages"></a>1. 本地博客发布到 Github Pages</h2><p>之前的步骤中，我们已经完成了对 Github 账户的注册以及 Github Pages 的创建，接下来是将本地博客发布至 Github Pages。</p><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol><pre><code>npm install hexo-deployer-git --save</code></pre><ol><li>紧接着，将本地目录与 GitHub 关联起来，输入下面的命令行：</li></ol><pre><code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code></pre><p>输入后一直回车，然后在 <code>C:/Users/[username]</code> 目录下找到名为<code>.ssh</code> 的文件夹， 文件夹内会有两个文件，一个 <code>id_rsa.pub</code> 一个 <code>id_rsa</code>，用文本编辑器打开 <code>id_rsa.pub</code>，复制里面的的内容。 然后打开 Github，点击右上角的头像 <strong>Settings</strong> 选择 <strong>SSH and GPG keys</strong></p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117222746.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117222746.png" alt="img"></a></p><p>img</p><p>点击 <strong>New SSH key</strong> 将之前复制的内容粘帖到 Key 的框中。 上面的 <strong>Title</strong> 可以随意，点击 <strong>Add SSH key</strong> 完成添加。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117223049.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117223049.png" alt="img"></a></p><p>img</p><p>然后回到 Git 的命令行界面，测试一下是否与 GitHub 连接成功。输入下面的命令行：</p><pre><code>ssh -T git@github.com</code></pre><p>点击回车，然后会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi ! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access.</code>。 说明连接成功。此处这个 `` 应该是你 Github 的用户名。</p><ol><li>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code> 是博客的配置文件，在以后的博客修改，如个性化修改，博客 SEO 优化等都会使用到，修改如下图的几个地方：</li></ol><pre><code>title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区</code></pre><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224138.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224138.png" alt="img"></a></p><p>img</p><p>滑到文件最底部，有一个 deploy，在 deploy 下面添加一个 repo 项 ，一个 branch 项。填入如下代码，并如下图所示：</p><pre><code>type: gitrepo: git@github.com:Github用户名/github用户名.github.io.git  //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            branch: master</code></pre><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224151.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191117224151.png" alt="img"></a></p><p>img</p><ol><li>最后就是生成页面，并发布至 Github Pages，执行如下命令：</li></ol><pre><code># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g -d</code></pre><p>上传完成后，在浏览器中打开 <strong>https://&lt;用户名&gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p><h1 id="五、hexo-博客主题安装以及一些个性化修改"><a href="#五、hexo-博客主题安装以及一些个性化修改" class="headerlink" title="五、hexo 博客主题安装以及一些个性化修改"></a>五、hexo 博客主题安装以及一些个性化修改</h1><blockquote><p><strong>转自：</strong><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md">🇺🇸English Document</a> | <a href="https://blinkfox.github.io/">演示示例</a> | QQ 交流群 1（已满）: <a href="https://jq.qq.com/?_wv=1027&k=5zMDYHT"><code>926552981</code></a> | QQ 交流群 2（推荐）: <a href="https://jq.qq.com/?_wv=1027&k=53q2Ayp"><code>971887688</code></a></p><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持 <code>emoji</code> 表情，用 <code>markdown emoji</code> 语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="1-主题下载与安装"><a href="#1-主题下载与安装" class="headerlink" title="1. 主题下载与安装"></a>1. 主题下载与安装</h2><p>点击 <a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本 (不定期更新优化)，自主选择版本。</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><p>如果主题下载速度比较慢的话，可以从我的码云仓库进行下载，我的码云仓库地址：<a href="https://gitee.com/yafine66/hexo-theme-matery">传送门</a></p><p>注意：在下载主题仓库之前，请先比对仓库更新时间是否与原作者仓库时间一致，如果一致，请执行下面的命令，如果不一致，请联系我进行仓库更新，当然你也可以自己进行相关的更新操作，自主选择！</p><pre><code>git clone https://gitee.com/yafine66/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://gitee.com/yafine66/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><h2 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h2><h3 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1 切换主题"></a>2.1 切换主题</h3><blockquote><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，比如我的博客文件在 <code>F:\blog</code> 下，那么站点配置文件就是 <code>F:\blog\_config.yml</code>，主题配置文件就是 <code>F:\blog\themes\matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p></blockquote><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>matery</code>，那么值就修改为 <code>theme: matery</code>。</p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在 <code>language:</code> 后添加值 <code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code> 的值为你的网址名，如 <code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可，至于有关域名的修改解析，后面我会说到，这里先不说了。</li><li>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h3 id="2-2-新建标签-tags-页面"><a href="#2-2-新建标签-tags-页面" class="headerlink" title="2.2 新建标签 tags 页面"></a>2.2 新建标签 tags 页面</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---</code></pre><h3 id="2-3-新建分类-categories-页面"><a href="#2-3-新建分类-categories-页面" class="headerlink" title="2.3 新建分类 categories 页面"></a>2.3 新建分类 categories 页面</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---</code></pre><h3 id="2-4-新建关于我-about-页面"><a href="#2-4-新建关于我-about-页面" class="headerlink" title="2.4 新建关于我 about 页面"></a>2.4 新建关于我 about 页面</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;about&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---</code></pre><h3 id="2-5-新建留言板-contact-页面-可选"><a href="#2-5-新建留言板-contact-页面-可选" class="headerlink" title="2.5 新建留言板 contact 页面 (可选)"></a>2.5 新建留言板 contact 页面 (可选)</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;contact&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p></blockquote><h3 id="2-6-新建友情链接-friends-页面-可选"><a href="#2-6-新建友情链接-friends-页面-可选" class="headerlink" title="2.6 新建友情链接 friends 页面 (可选)"></a>2.6 新建友情链接 friends 页面 (可选)</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page &quot;friends&quot;</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code>[&#123;    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;https://me.csdn.net/jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]</code></pre><h3 id="2-7-菜单导航配置"><a href="#2-7-菜单导航配置" class="headerlink" title="2.7 菜单导航配置"></a>2.7 菜单导航配置</h3><h4 id="2-7-1-配置基本菜单导航的名称、路径-url-和图标-icon"><a href="#2-7-1-配置基本菜单导航的名称、路径-url-和图标-icon" class="headerlink" title="2.7.1. 配置基本菜单导航的名称、路径 url 和图标 icon."></a>2.7.1. 配置基本菜单导航的名称、路径 url 和图标 icon.</h4><ol><li>菜单导航名称可以是中文也可以是英文 (如：<code>Index</code> 或<code>主页</code>)</li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li></ol><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="2-7-2-二级菜单配置方法"><a href="#2-7-2-二级菜单配置方法" class="headerlink" title="2.7.2. 二级菜单配置方法"></a>2.7.2. 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字 (如:<code>About</code> 菜单下添加 <code>children</code>)</li><li>在 <code>children</code> 下创建二级菜单的 名称 name, 路径 url 和图标 icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h3 id="2-8-添加-emoji-表情支持（可选的）"><a href="#2-8-添加-emoji-表情支持（可选的）" class="headerlink" title="2.8 添加 emoji 表情支持（可选的）"></a>2.8 添加 emoji 表情支持（可选的）</h3><p>本主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code> 表情的生成，把对应的 <code>markdown emoji</code> 语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的 <code>emoji</code> 表情，安装命令如下：</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用 <code>emoji</code> 语法写的表情了。</p><h3 id="2-9-代码高亮"><a href="#2-9-代码高亮" class="headerlink" title="2.9 代码高亮"></a>2.9 代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code>prism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><h3 id="2-10-搜索"><a href="#2-10-搜索" class="headerlink" title="2.10 搜索"></a>2.10 搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="2-11-中文链接转拼音（可选的）"><a href="#2-11-中文链接转拼音（可选的）" class="headerlink" title="2.11 中文链接转拼音（可选的）"></a>2.11 中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="2-12-文章字数统计插件（可选的）"><a href="#2-12-文章字数统计插件（可选的）" class="headerlink" title="2.12 文章字数统计插件（可选的）"></a>2.12 文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h3 id="2-13-添加-RSS-订阅支持（可选的）"><a href="#2-13-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.13 添加 RSS 订阅支持（可选的）"></a>2.13 添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="2-14-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-14-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.14 添加 DaoVoice 在线聊天功能（可选的）"></a>2.14 添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中</p><h3 id="2-15-添加-Tidio-在线聊天功能（可选的）"><a href="#2-15-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.15 添加 Tidio 在线聊天功能（可选的）"></a>2.15 添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="2-16-修改页脚"><a href="#2-16-修改页脚" class="headerlink" title="2.16 修改页脚"></a>2.16 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="2-17-修改社交链接"><a href="#2-17-修改社交链接" class="headerlink" title="2.17 修改社交链接"></a>2.17 修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.github %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;</code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="2-18-修改打赏的二维码图片"><a href="#2-18-修改打赏的二维码图片" class="headerlink" title="2.18 修改打赏的二维码图片"></a>2.18 修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="2-19-配置音乐播放器（可选的）"><a href="#2-19-配置音乐播放器（可选的）" class="headerlink" title="2.19 配置音乐播放器（可选的）"></a>2.19 配置音乐播放器（可选的）</h3><blockquote><p>新版主题支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活 music 配置即可：</p><pre><code># 是否在首页显示音乐music:  enable: true  title:            #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code> 可选 <code>netease</code>（网易云音乐），<code>tencent</code>（QQ 音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code> 可选 <code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code> 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code> 的 <code>id</code> 即为这串数字。</p></blockquote><h2 id="3-文章-Front-matter-介绍"><a href="#3-文章-Front-matter-介绍" class="headerlink" title="3. 文章 Front-matter 介绍"></a>3. 文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code> 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code> 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h2 id="4-效果截图"><a href="#4-效果截图" class="headerlink" title="4. 效果截图"></a>4. 效果截图</h2><blockquote><p><strong>最新版本进行了优化更新，效果图与最初的效果图有差别，下面的图不是最新版本的。</strong></p></blockquote><p><a href="http://static.blinkfox.com/matery-20181202-1.png"><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></a></p><p>首页</p><p><a href="http://static.blinkfox.com/matery-20181202-2.png"><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></a></p><p>首页推荐文章</p><p><a href="http://static.blinkfox.com/matery-20181202-3.png"><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></a></p><p>首页文章列表</p><p><a href="http://static.blinkfox.com/matery-20181202-7.png"><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="关于我页面"></a></p><p>关于我页面</p><p><a href="http://static.blinkfox.com/matery-20181202-8.png"><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="文章详细页面"></a></p><p>文章详细页面</p><h2 id="5-自定制修改"><a href="#5-自定制修改" class="headerlink" title="5. 自定制修改"></a>5. 自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="5-1-修改主题颜色"><a href="#5-1-修改主题颜色" class="headerlink" title="5.1 修改主题颜色"></a>5.1 修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow &#123;   /* 动态切换背景颜色. */&#125;@keyframes rainbow &#123;    /* 动态切换背景颜色. */&#125;</code></pre><h3 id="5-2-修改-banner-图和文章特色图"><a href="#5-2-修改-banner-图和文章特色图" class="headerlink" title="5.2 修改 banner 图和文章特色图"></a>5.2 修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre><code>$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><h3 id="5-3-修改网站相关信息"><a href="#5-3-修改网站相关信息" class="headerlink" title="5.3 修改网站相关信息"></a>5.3 修改网站相关信息</h3><p>首先看一个图，如下：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png" alt="img"></a></p><p>img</p><p>紧接着放上相关的配置文件信息：</p><ol><li>网站信息的修改</li></ol><pre><code>#这是根目录下的配置文件信息title: 过客~励む   #这是网站标题subtitle: 励む    #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]  #网站的关键词author: YangAir  #作者，文章版权所显示的language: zh-CN  #网站语言，不填写，默认为英文timezone:   #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</code></pre><p><strong>注意：</strong></p><p>网站打字效果副标题默认有两个，即 <code>sub1</code> 和 <code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 <code>sub1</code> 和 <code>sub2</code> 后面继续添加即可，然后在去主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>bg-cover-content.ejs</code> 文件，大约在 12 行左右，如下面所示：</p><pre><code> &lt;div class=&quot;description center-align&quot;&gt;     &lt;% if (theme.subtitle.enable) &#123; %&gt;         &lt;span id=&quot;subtitle&quot;&gt;&lt;/span&gt;         &lt;script src=&quot;https://cdn.jsdelivr.net/npm/typed.js@2.0.11&quot;&gt;&lt;/script&gt;        &lt;script&gt;            var typed = new Typed(&quot;#subtitle&quot;, &#123;                strings: [&#39;&lt;%= theme.subtitle.sub1 %&gt;&#39;,                          &#39;&lt;%= theme.subtitle.sub2 %&gt;&#39;,                          &#39;&lt;%= theme.subtitle.sub3 %&gt;&#39;,                          &#39;&lt;%= theme.subtitle.sub4 %&gt;&#39;,                          &#39;&lt;%= theme.subtitle.sub5 %&gt;&#39;,                          &#39;&lt;%= theme.subtitle.sub6 %&gt;&#39;],                 startDelay: &lt;%= theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%= theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%= theme.subtitle.loop %&gt;,                    backSpeed: &lt;%= theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%= theme.subtitle.showCursor %&gt;              &#125;);          &lt;/script&gt;      &lt;% &#125; else &#123; %&gt;            &lt;%= config.description %&gt;      &lt;% &#125; %&gt;&lt;/div&gt;</code></pre><ol><li>社交链接的修改</li></ol><p>默认的配置信息为：</p><pre><code># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https://github.com/blinkfox  email: 1181062873@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: 1181062873  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: true # true、false</code></pre><p>如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置，如下是我个人的配置：</p><pre><code>socialLink:  qq: 1035800145  weixin: https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/wechat.png  github: https://github.com/Yafine  email: mailto:1035800145@qq.com  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  weibo: # https://weibo.com/xxx  zhihu: https://www.zhihu.com/people/xuan-tian-40-64/activities  juejin: https://juejin.im/user/5a902053f265da4e7527ae71/activities  csdn: https://blog.csdn.net/victoryxa  jianshu: https://www.jianshu.com/u/3b3856869772  cnblogs: https://www.cnblogs.com/yafine/  rss: true # true、false</code></pre><p>其中的 <code>weixin</code> 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 <code>ejs</code> 文件，文件在主题目录下的 <code>layout</code> 文件夹下的<code>_partial</code> 文件夹，修改 <code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><pre><code>&lt;% if (theme.socialLink.jianshu) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.jianshu %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的简书: &lt;%= theme.socialLink.jianshu %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-jianshu&quot;&gt;简&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.csdn) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.csdn %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的CSDN: &lt;%= theme.socialLink.csdn %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-csdn&quot;&gt;C&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.juejin) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.juejin %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的掘金: &lt;%= theme.socialLink.juejin %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-juejin&quot;&gt;掘&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.cnblogs) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.cnblogs %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;关注我的博客园: &lt;%= theme.socialLink.cnblogs %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-juejin&quot;&gt;博&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.weixin) &#123; %&gt;    &lt;a href=&quot;&lt;%= theme.socialLink.weixin %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;微信联系我: &lt;%= theme.socialLink.weixin %&gt;&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;        &lt;i class=&quot;fab fa-weixin&quot;&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% &#125; %&gt;</code></pre><h2 id="6-版本记录"><a href="#6-版本记录" class="headerlink" title="6. 版本记录"></a>6. 版本记录</h2><ul><li>v1.3.2<ul><li>新增了繁体字的支持；</li><li>新增了 404 页面；</li><li>其他小问题修改；</li></ul></li><li>v1.3.1<ul><li>新增了 <code>kbd</code> 样式；</li><li>修复了子目录部署时词云中链接有误的问题；</li><li>移除了 TOC 中的竖线；</li><li>修复了首页 icon 图标中的 tooltip 不显示的问题；</li><li>修复生成静态文件时，每天切换 banner 不生效的问题；</li><li>更新了 <code>miniValine</code> 中的一些配置；</li></ul></li><li>v1.3.0<ul><li>新增了支持子目录部署的功能（如：<code>Gitee</code>）；</li><li>新增了 <code>MiniValine</code> 评论系统；</li><li>新增了 <code>jsdelivr</code> 的支持；</li><li>修复了诸多发现的 bug；</li></ul></li><li>v1.2.2<ul><li>新增了自定义文章 <code>keywords</code> 的功能；</li><li>新增静态彩带点击切换的功能和配置；</li><li>将文章字数统计、彩带和站点运行时间等功能默认设置为 <code>false</code>；</li><li>修改了文章的 <code>description</code> 的 meta 属性优先读取文章的 <code>summary</code> 属性；</li><li>修改了文章标题的 HTML 标签，从 <code>div</code> 改成了 <code>h1</code> 标题；</li><li>修改了页脚年份显示不正确的问题；</li><li>去掉了站点运行时间中多余的 <code>setTimeout</code> 代码；</li></ul></li><li>v1.2.1<ul><li>新增了 TOC 的展开目录层级设置和滚动条功能，防止目录较多的时候目录溢出；</li><li>修改了首页的展示方式为以前的模式；</li><li>修复首页按钮没有边框的问题；</li><li>修复了音乐及吸底模式、视频、推荐文章等不激活时仍然生成首页卡片的问题；</li><li>修复 wordCount 插件未安装的问题，修改了部分配置；</li><li>修复音乐的 JSON 配置中有单引号的情况页面不显示的音乐的问题</li><li>修复标签云在 Hexo4.0 下链接失效的问题；</li></ul></li><li>v1.2.0<ul><li>新增了 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 的在线聊天功能；</li><li>新增了两级菜单的功能；</li><li>新增了打字效果的副标题；</li><li>新增了网页内容预加载的功能；</li><li>新增了首页 banner 是否每日切换的配置功能；</li><li>新增了显示 ICP 备案信息的功能，默认未开启；</li><li>新增了百度分析的配置；</li><li>新增了代码块的语言显示、一键复制、显示行号等功能；</li><li>新增了首页轮播图和推荐文章可自定义配置的功能；</li><li>新增了文章页面显示更新日期；</li><li>新增了转载规则的图标；</li><li>修改了分享的布局和显示方式；</li><li>升级更新了部分依赖库的版本；</li><li>其他细节修改和优化；</li></ul></li><li>v1.1.0<ul><li>新增了 <code>emoji</code> 的支持；</li><li>新增了站点运行时间统计及配置；</li><li>新增了留言板的功能，默认未开启；</li><li>新增了 <code>Twitter</code>、<code>Facebook</code>、知乎的社交链接；</li><li>更新了 <code>Valine</code> 的版本为最新版；</li><li>其他小细节的修改；</li></ul></li><li>v1.0.4<ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li>v1.0.3<ul><li>新增了 <code>TOC</code> 展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/">Materialize</a> 框架版本为 <code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code> 中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code> 下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul><h1 id="六、其他一些-DIY-可选"><a href="#六、其他一些-DIY-可选" class="headerlink" title="六、其他一些 DIY (可选)"></a>六、其他一些 DIY (可选)</h1><blockquote><p>主题 DIY 会涉及到 js 文件和 css 文件等的修改，个人建议新增的 js 文件放在 <code>themes/matery/layout/layout.ejs</code> 这个文件下，这样会稍微加快博客访问的速度。不想花钱最好的方式是使用 cdn.jsdeliver。以后会说到。</p></blockquote><h2 id="1-动态标题"><a href="#1-动态标题" class="headerlink" title="1. 动态标题"></a>1. 动态标题</h2><p>先放上效果图再说：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191201224219.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191201224219.png" alt="离开当前页面时"></a></p><p>离开当前页面时</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191201224258.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191201224258.png" alt="返回当前页面时"></a></p><p>返回当前页面时</p><p>实现方法，引入 js 文件，在主题文件下的 <code>/source/js/</code> 下新建 <code>FunnyTitle.js</code>，然后在添加到 <code>themes/matery/layout/layout.ejs</code> 或者添加到 <code>themes/matery/layout/_partial/head.ejs</code>，其代码如下：</p><pre><code>&lt;!--浏览器搞笑标题--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&#39;visibilitychange&#39;, function () &#123;     if (document.hidden) &#123;         $(&#39;[rel=&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png&quot;);         document.title = &#39;ヽ(●-`Д´-)ノ你要玩捉迷藏嘛&#39;;         clearTimeout(titleTime);     &#125;     else &#123;         $(&#39;[rel=&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png&quot;);         document.title = &#39;ヾ(Ő∀Ő3)ノ好哦！&#39; + OriginTitle;         titleTime = setTimeout(function () &#123;             document.title = OriginTitle;         &#125;, 2000);     &#125; &#125;);</code></pre><p>我的链接：<strong><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/FunnyTitle.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/FunnyTitle.js</a></strong>（理论上一直有效）</p><p>或者直接在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    var OriginTitile=document.title,st;    document.addEventListener(&quot;visibilitychange&quot;,function()&#123;        document.hidden?(document.title=&quot;ヽ(●-`Д´-)ノ你要玩捉迷藏嘛&quot;,clearTimeout(st)):(document.title=&quot;(Ő∀Ő3)ノ好哦！&quot;,st=setTimeout(function()&#123;document.title=OriginTitile&#125;,3e3))    &#125;)&lt;/script&gt;</code></pre><h2 id="2-修改导航栏颜色以及透明效果"><a href="#2-修改导航栏颜色以及透明效果" class="headerlink" title="2. 修改导航栏颜色以及透明效果"></a>2. 修改导航栏颜色以及透明效果</h2><p>打开 <code>themes/matery/source/css/matery.css</code> 文件，大约在 250 行，有一个<code>.bg-color</code> 属性，修改其属性值即可，代码如下：</p><pre><code>.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值    opacity: 0.8;  //透明效果 值范围 0~1，看情况自己修改&#125;</code></pre><h2 id="3-添加动态诗词"><a href="#3-添加动态诗词" class="headerlink" title="3. 添加动态诗词"></a>3. 添加动态诗词</h2><p>采用的是<a href="https://www.jinrishici.com/">今日诗词</a>，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有 <a href="https://www.jinrishici.com/doc/">API 文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在 <code>/themes/matery/layout/_partial/head.ejs</code> 添加下面的一行代码：</p><pre><code>&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</code></pre><p>然后再将 <code>/themes/matery/layout/_partial/bg-cover-content.ejs</code> 中的 <code>&lt;%= config.description %&gt;</code> 修改为把 <code>&lt;%= config.description %&gt;</code> 改为 <code>&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;&#39; %&gt;</code>，这个使用前提是将主题配置文件的 <code>subtitle</code> 的值改为 <code>false</code>。</p><h2 id="4-鼠标点击文字特效"><a href="#4-鼠标点击文字特效" class="headerlink" title="4. 鼠标点击文字特效"></a>4. 鼠标点击文字特效</h2><p>实现方法，引入 js 文件，在主题文件下的 <code>/source/js/</code> 下新建 <code>click_show_text.js</code>，其代码如下：</p><pre><code>var a_idx = 0;jQuery(document).ready(function ($) &#123;    $(&quot;body&quot;).click(function (e) &#123;        var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);        var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);        a_idx = (a_idx + 1) % a.length;        var x = e.pageX,            y = e.pageY;        $i.css(&#123;            &quot;z-index&quot;: 5,            &quot;top&quot;: y - 20,            &quot;left&quot;: x,            &quot;position&quot;: &quot;absolute&quot;,            &quot;font-weight&quot;: &quot;bold&quot;,            &quot;color&quot;: &quot;#FF0000&quot;        &#125;);        $(&quot;body&quot;).append($i);        $i.animate(&#123;                &quot;top&quot;: y - 180,                &quot;opacity&quot;: 0            &#125;,            3000,            function () &#123;                $i.remove();            &#125;);    &#125;);    setTimeout(&#39;delay()&#39;, 2000);&#125;);function delay() &#123;    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);&#125;</code></pre><p>或者使用我的 cdn 链接，理论上一直有效 <strong><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/click_show_text.js">https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/click_show_text.js</a></strong>，然后在添加到 <code>themes/matery/layout/layout.ejs</code>。</p><h2 id="5-修改原有相册"><a href="#5-修改原有相册" class="headerlink" title="5. 修改原有相册"></a>5. 修改原有相册</h2><blockquote><p>参考教程：<a href="https://yafine-blog.cn/posts/3b98.html">https://yafine-blog.cn/posts/3b98.html</a></p></blockquote><h2 id="6-添加天气小插件"><a href="#6-添加天气小插件" class="headerlink" title="6. 添加天气小插件"></a>6. 添加天气小插件</h2><p>首先去中国天气官网：<a href="https://cj.weather.com.cn/plugin/pc%EF%BC%8C%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8F%92%E4%BB%B6%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E2%80%94%3E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E2%80%94%E2%80%94%3E%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BC%9A%E7%94%9F%E6%88%90%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E5%88%B0">https://cj.weather.com.cn/plugin/pc，配置自己的插件，选择自定义插件 —&gt; 自定义样式 ——&gt; 生成代码，然后会生成一段代码，复制粘贴到</a> <code>themes/matery/layout/layout.ejs</code> 即可。</p><h2 id="7-关于我页面添加个人简历"><a href="#7-关于我页面添加个人简历" class="headerlink" title="7. 关于我页面添加个人简历"></a>7. 关于我页面添加个人简历</h2><p>打开 <code>theme/matery/layout/about.ejs</code> 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre><code>&lt;div class=&quot;card&quot;&gt;     &lt;div class=&quot;card-content&quot;&gt;         &lt;div class=&quot;card-content article-card-content&quot;&gt;             &lt;div class=&quot;title center-align&quot; data-aos=&quot;zoom-in-up&quot;&gt;                 &lt;i class=&quot;fa fa-address-book&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;个人简历&#39;) %&gt;              &lt;/div&gt;                 &lt;div id=&quot;articleContent&quot; data-aos=&quot;fade-up&quot;&gt;                     &lt;%- page.content %&gt;                 &lt;/div&gt;           &lt;/div&gt;      &lt;/div&gt;&lt;/div&gt;</code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个 card，然后 <code>/source/about/index.md</code> 下面写上你的简历了（就像写博客一样）。</p><h2 id="8-豆瓣书单电影页面"><a href="#8-豆瓣书单电影页面" class="headerlink" title="8. 豆瓣书单电影页面"></a>8. 豆瓣书单电影页面</h2><p>注意：首先需要检查你的 hexo 版本是多少，在你的博客目录下执行命令 hexo -v 即可，这个豆瓣插件需要的版本需要 &lt; 4.2.0，否则会出现 bug，比如点击书单的在读，想读或者已读会出现一个新的弹出页面，解决办法就是降低 hexo 的版本，先卸载目前的 hexo 版本，再安装 4.0.0 版本的 hexo 即可，我的版本为 4.0.0。</p><pre><code>npm uninstall hexonpm install hexo@4.0.0 -g</code></pre><ol><li>首先在博客站点目录执行下面的命令安装豆瓣插件：</li></ol><pre><code>npm install hexo-douban --save</code></pre><ol><li>紧接着在博客站点目录的配置文件<code>_config.yml</code> 下，添加如下配置：</li></ol><pre><code>douban:   user: 252345665    #这个需要修改为你个人的id    builtin: false   #如果想生成豆瓣页面，这个需要设置为true  book:     title: &#39;This is my book title&#39;     quote: &#39;This is my book quote&#39;   movie:     title: &#39;This is my movie title&#39;     quote: &#39;This is my movie quote&#39;   game:     title: &#39;This is my game title&#39;     quote: &#39;This is my game quote&#39;   timeout: 10000</code></pre><ul><li><strong>user</strong>:：你的豆瓣 ID。打开豆瓣，登入账户，然后在右上角点击 ” 个人主页 “，这时候地址栏的 URL 大概是这样：<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a> ，其中的”xxxxxx” 就是你的个人 ID 了。</li><li><strong>builtin</strong>：是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中，默认是 <code>false</code> ，另一可选项为 <code>true</code> 。</li><li><strong>title</strong>： 该页面的标题。</li><li><strong>quote</strong>： 写在页面开头的一段话，支持 html 语法。</li><li><strong>timeout</strong>： 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错 (ETIMEOUT) 可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面 (比如 movie)，那就把其他的配置项注释掉即可。</p><ol><li>然后再主题配置文件<code>_config.yml</code> 中添加关于此页面的菜单：(下面是我的配置)</li></ol><pre><code>menu:    媒体:       url: /       icon: fas fa-list       children:         - name: 电影           url: /movies           icon: fas fa-film         - name: 书单           url: /books           icon: fas fa-book         - name: 游戏           url: /games           icon: fas fa-gamepad</code></pre><ol><li>适配 Matery 主题：在 <code>/themes/hexo-theme-matery/layout</code> 文件夹下面创建一个名为 <code>douban.ejs</code> 的文件，并将下面的内容复制进去：</li></ol><pre><code>&lt;%- partial(&#39;_partial/post-cover&#39;) %&gt; &lt;style&gt;     .hexo-douban-picture img &#123;        width: 100%;     &#125; &lt;/style&gt;&lt;main class=&quot;content&quot;&gt;     &lt;div id=&quot;contact&quot; class=&quot;container chip-container&quot;&gt;         &lt;div class=&quot;card&quot;&gt;             &lt;div class=&quot;card-content&quot; style=&quot;padding: 30px&quot;&gt;                 &lt;h1 style=&quot;margin: 10px 0 10px 0px;&quot;&gt;&lt;%= page.title %&gt;&lt;/h1&gt;                 &lt;%- page.content %&gt;             &lt;/div&gt;         &lt;/div&gt;         &lt;div class=&quot;card&quot;&gt;             &lt;div class=&quot;card-content&quot; style=&quot;text-align: center&quot;&gt;                 &lt;h3 style=&quot;margin: 5px 0 5px 5px;&quot;&gt;如果你有好的内容推荐，欢迎在下面留言！&lt;/h3&gt;             &lt;/div&gt;         &lt;/div&gt;         &lt;div class=&quot;card&quot;&gt;             &lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) &#123; %&gt;                &lt;%- partial(&#39;_partial/gitalk&#39;) %&gt;            &lt;% &#125; %&gt;             &lt;% if (theme.gitment.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial/gitment&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.disqus.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial/disqus&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.livere &amp;&amp; theme.livere.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial/livere&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.valine &amp;&amp; theme.valine.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial/valine&#39;) %&gt;             &lt;% &#125; %&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/main&gt;</code></pre><ol><li>然后在博客站点目录下的 <code>node_modules</code> 文件夹下找到 <code>hexo-douban/lib</code>，文件夹下有三个 js 文件，分别为：<code>books-generator.js</code> 、<code>games-generator.js</code> 、<code>movies-generator.js</code>，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：</li></ol><pre><code>/* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/layout: [`page`, `douban`]</code></pre><ol><li>最后就是使用并生成相应的页面，执行命令如下:</li></ol><pre><code>hexo douban</code></pre><p><strong>需要注意的是</strong>，通常大家都喜欢用 <code>hexo d</code> 来作为 <code>hexo deploy</code> 命令的简化，但是当安装了 <code>hexo douban</code> 之后，就不能用 <code>hexo d</code> 了，因为 <code>hexo douban</code> 跟 <code>hexo deploy</code> 的前缀都是 <code>hexo d</code> ，你以后执行的 <code>hexo d</code> 将不再是 Hexo 页面的生成，而是豆瓣页面的生成。</p><p>以下是可选的命令参数：</p><pre><code>-h, --help    # 帮助页面-b, --books   # 只生成书单页面-g, --games   # 只生成游戏页面-m, --movies  # 只生成电影页面</code></pre><p><strong>当站点配置文件的 builtin 的值为 true 时，生成页面的功能会嵌入到 <code>hexo g</code> 和 <code>hexo s</code> 中，在进行部署生成操作，会自动生成相应的页面</strong>。</p><h2 id="9-外链跳转插件"><a href="#9-外链跳转插件" class="headerlink" title="9. 外链跳转插件"></a>9. 外链跳转插件</h2><blockquote><p><a href="https://blog.hvnobug.com/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2h2bm9idWcvaGV4by1leHRlcm5hbC1saW5r">hexo-external-link</a> 是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接，不要将该链接计入权重。 同时自动生成外链跳转页面，默认在根目录下 go.html;</p></blockquote><p>使用 npm 或者 yarn 安装</p><pre><code>## npm 安装npm install hexo-external-link --save## yarn 安装yarn add hexo-external-link</code></pre><p>之后再 hexo 博客站点根目录下添加如下配置：</p><pre><code>hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: &#39;u&#39;  html_file_name: &#39;go.html&#39;  target_blank: true  link_rel: &#39;external nofollow noopener noreferrer&#39;  domain: &#39;your_domain&#39; # 如果开启了防盗链，填写你的域名  safety_chain: true</code></pre><ul><li><strong>enable</strong> - 是否开启 <code>hexo_external_link</code> 插件 - 默认 false</li><li><strong>enable_base64_encode</strong> - 是否对跳转 <code>url</code> 使用 <code>base64编码</code> - 默认 fasle</li><li><strong>url_param_name</strong> - url 参数名，在跳转到外链传递给 <code>html_file_name</code> 的参数名 - 默认 ‘u’</li><li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li><li><strong>target_blank</strong> - 是否为外链的 <code>a</code> 标签添加 <code>target=&#39;_blank&#39;</code> - 默认 true</li><li><strong>link_rel</strong> - 设置外链的 <code>a</code> 标签的 rel 属性 - 默认 ‘external nofollow noopener noreferrer’</li><li><strong>domain</strong> - 如果开启了防盗链，除了 localhost 和 domain (你的域名) 之外调用会跳到主页，同时也是判断链接是否为外链的依据 - 默认 window.location.host</li><li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li></ul><h2 id="10-添加动态科技线条背景"><a href="#10-添加动态科技线条背景" class="headerlink" title="10. 添加动态科技线条背景"></a>10. 添加动态科技线条背景</h2><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/04.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/04.gif" alt="img"></a></p><p>img</p><p>在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre><code>&lt;!--动态线条背景--&gt;&lt;script type=&quot;text/javascript&quot;color=&quot;122 103 238&quot; opacity=&#39;0.7&#39; zIndex=&quot;-2&quot; count=&quot;200&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>其中：</p><ul><li>color：表示线条颜色，三个数字分别为 (R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的 z-index 属性，css 属性用于控制所在层的位置，默认：-1</li></ul><h2 id="11-添加鼠标点击烟花爆炸效果"><a href="#11-添加鼠标点击烟花爆炸效果" class="headerlink" title="11. 添加鼠标点击烟花爆炸效果"></a>11. 添加鼠标点击烟花爆炸效果</h2><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/03.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/03.gif" alt="img"></a></p><p>img</p><p>首先在 <code>themes/matery/source/js</code> 目录下新建 <code>fireworks.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/fireworks.js">传送门</a>，将内容复制粘贴到 <code>fireworks.js</code> 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加下面的内容：</p><pre><code>&lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 即可，就可以看到效果了。</p><h2 id="12-添加樱花飘落效果"><a href="#12-添加樱花飘落效果" class="headerlink" title="12. 添加樱花飘落效果"></a>12. 添加樱花飘落效果</h2><p>先看效果：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/02.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/02.gif" alt="img"></a></p><p>img</p><p>在 <code>themes/matery/source/js</code> 目录下新建 <code>sakura.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/sakura.js">传送门</a>，将内容复制粘贴到 sakura.js 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加下面的内容：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;//只在桌面版网页启用特效var windowWidth = $(window).width();if (windowWidth &gt; 768) &#123;    document.write(&#39;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&lt;\/script&gt;&#39;);&#125;&lt;/script&gt;</code></pre><h2 id="13-添加鼠标彩虹星星掉落跟随效果"><a href="#13-添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="13. 添加鼠标彩虹星星掉落跟随效果"></a>13. 添加鼠标彩虹星星掉落跟随效果</h2><p>先看看效果，再决定要不要用。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/01.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/01.gif" alt="img"></a></p><p>img</p><p>在 <code>themes/matery/source/js</code> 目录下新建 <code>cursor.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/cursor.js">传送门</a>，将内容复制粘贴到 cursor.js 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加下面的内容：</p><pre><code>&lt;script src=&quot;/js/cursor.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="14-添加雪花飘落效果"><a href="#14-添加雪花飘落效果" class="headerlink" title="14. 添加雪花飘落效果"></a>14. 添加雪花飘落效果</h2><p>先看看效果吧！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/1.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/1.gif" alt="img"></a></p><p>img</p><p>) 在 <code>themes/matery/source/js</code> 目录下新建 <code>snow.js</code> 文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/snow1.js">传送门</a>，将内容复制粘贴到 cursor.js 即可。</p><p>然后再 <code>themes/matery/layout/layout.ejs</code> 文件内添加下面的内容：</p><pre><code>&lt;script src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="15-添加自定义页面"><a href="#15-添加自定义页面" class="headerlink" title="15. 添加自定义页面"></a>15. 添加自定义页面</h2><p>首先看一下效果吧，我自己写的，写的不好，不要笑我哦！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115.gif"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115.gif" alt="img"></a></p><p>img</p><p>以我的配置为例：</p><p>首先在站点目录下的 source 文件夹下新建 <code>aboutme</code> 文件，文件名可自定义，然后编写一个 <code>index.html</code> 放入 <code>aboutme</code> 文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</p><pre><code>About:    url: /    icon: fas fa-address-card    children:      - name: 关于我        url: /about        icon: fas fa-user-circle      - name: Another    #这是新添加的，在原有配置基础上添加        url: /aboutme        icon: fa fa-user-secret</code></pre><p>然后在站点配置文件下，找到 <code>skip_render</code>，在后面添加属性，如下：</p><pre><code>skip_render: aboutme/**  # 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件</code></pre><p>如果添加需要跳过多个目录下的文件时，配置如下：</p><pre><code>skip_render:     - aboutme/**     - box/**    - 2020/**</code></pre><p>知道方法后，你可以添加你自己想要添加的页面，让你的博客内容更加充实。</p><h2 id="16-添加-404-页面"><a href="#16-添加-404-页面" class="headerlink" title="16. 添加 404 页面"></a>16. 添加 404 页面</h2><p>我的 404 页面是这样的：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200117142120.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200117142120.png" alt="img"></a></p><p>img</p><p>开始说一下配置步骤，首先再站点根目录下的 source 文件夹下新建 <code>404.md</code> 文件，里面内容如下：</p><pre><code>---title: 404date: 2019-10-28 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面了&quot;---</code></pre><p>紧接着再新建主题文件夹的 layout 目录下新建 <code>404.ejs</code> 文件，添加内容如下：</p><pre><code>&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover &#123;        height: 90.2vh;    &#125;&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;/script&gt;</code></pre><p>然后部署，再看看效果即可。</p><h2 id="17-文章生成永久链接"><a href="#17-文章生成永久链接" class="headerlink" title="17. 文章生成永久链接"></a>17. 文章生成永久链接</h2><p>主题默认的文章链接配置是</p><pre><code>permalink: :year/:month/:day/:title</code></pre><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><p>首先再根目录下执行下面的命令：</p><p><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlinkGitHub 地址</a></p><pre><code>npm install hexo-abbrlink --save</code></pre><p>然后再站点配置文件下添加如下配置：</p><pre><code>abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><p>再将站点配置文件的 <code>permalink</code> 的值修改为：</p><pre><code>permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code></pre><p>生成文章的链接格式就会是如下样例（官方样例）:</p><pre><code>crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html</code></pre><p>生成完后，原 md 文件的 Front-matter 内会增加 <code>abbrlink</code> 字段，值为生成的 ID 。这个字段确保了在我们修改了 <code>Front-matter</code> 内的博客标题 title 或创建日期 date 字段之后而不会改变链接地址。</p><h2 id="18-页面获取标题-可选"><a href="#18-页面获取标题-可选" class="headerlink" title="18. 页面获取标题 (可选)"></a>18. 页面获取标题 (可选)</h2><p>看两个图就知道是怎么回事了。</p><p>客官说：小二儿，上图。</p><p>小二儿说：来喽！</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200215202242.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200215202242.png" alt="img"></a></p><p>img</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200215202340.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200215202340.png" alt="img"></a></p><p>img</p><p>看图中所指出的文字，和你的比较一下，你就知道差别在哪了！不说这么多的废话了，上教程！看下面。</p><p>以我的博客位置为例，修改 <code>F:\blog\themes\matery\layout\_partial</code> 中的 <code>bg-cover-content.ejs</code> 文件，其中原主题中这个文件的代码为 (大约在第 4 行)：</p><pre><code>&lt;div class=&quot;title center-align&quot;&gt;     &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) &#123; %&gt;            &lt;%= config.subtitle %&gt;     &lt;% &#125; else &#123; %&gt;            subtitle     &lt;% &#125; %&gt;&lt;/div&gt;</code></pre><p>修改过后的代码为：</p><pre><code>&lt;div class=&quot;title center-align&quot;&gt;     &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) &#123; %&gt;        &lt;%= config.subtitle %&gt;     &lt;% &#125; else &#123; %&gt;        &lt;%= page.title %&gt;     &lt;% &#125; %&gt;&lt;/div&gt;</code></pre><blockquote><p>这个有一点 bug，归档页面标题无法显示，解决办法目前还没有，以后如果解决，会更新文档的！</p></blockquote><p>然后保存，执行 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code> 查看效果即可。</p><p><strong>注意：</strong>获取的 <code>title</code> 标题在 md 文档中的 <code>fromt-matter</code> 属性中 <code>title</code> 的值，可自定义，你只需要去本地找到页面所在的 md 文档中，将其值修改为中文或者英文即可。</p><p>例如：友情链接这一块，你去博客文件的 <code>F:\blog\source\friends</code>（这是我的本地路径）目录，打开目录下的 index.md 文档，将 <code>title</code> 后面的值由原来的 <code>friends</code> 值修改为中文的友情链接或者友人帐或者其他（自定义），然后保存，执行命令，查看效果即可，如没有问题，在部署到代码托 i 管平台。完美！</p><h1 id="七、添加评论系统"><a href="#七、添加评论系统" class="headerlink" title="七、添加评论系统"></a>七、添加评论系统</h1><p>我只说几个常用的评论系统的配置方法，其他的就不说了。</p><h2 id="7-1-添加来必力评论系统"><a href="#7-1-添加来必力评论系统" class="headerlink" title="7.1 添加来必力评论系统"></a>7.1 添加来必力评论系统</h2><p>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：</p><ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115142313.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115142313.png" alt="img"></a></p><p>img</p><p>注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/image-20200115142709585.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/image-20200115142709585.png" alt="img"></a></p><p>img</p><pre><code># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid</code></pre><p>然后在执行相关的部署命令，然后查看效果即可。</p><h2 id="7-2-添加-Valine-评论系统"><a href="#7-2-添加-Valine-评论系统" class="headerlink" title="7.2 添加 Valine 评论系统"></a>7.2 添加 Valine 评论系统</h2><p><a href="https://valine.js.org/">Valine 官方文档</a></p><p>如果注册过 LeanCloud，请点击此处进行<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>，未注册的请点击<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a></p><p>经过登录或者注册之后再登录，就会进入如下的页面：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115145855.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115145855.png" alt="img"></a></p><p>img</p><p>创建应用完成后，会出现如下页面，然后点击设置</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115150319.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115150319.png" alt="img"></a></p><p>img</p><p>会出现下面的页面，将其中 APPID 和 APPKey 复制，添加到配置文件中。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115150641.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115150641.png" alt="img"></a></p><p>img</p><pre><code># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  # true即为开启评论系统  appId:   #此处填写你的appid  appKey:  #此处填写你的appkey  notify: false  verify: false  visitor: true  avatar: &#39;mm&#39; # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: &#39;just go go&#39; # Comment Box placeholder  background:  https://cdn.jsdelivr.net/gh/Yafine/cdn@3.1.1/social/comment_bg.png</code></pre><p>然后执行相关部署命令，查看效果即可。</p><h2 id="7-3-添加-Gitalk-评论模块"><a href="#7-3-添加-Gitalk-评论模块" class="headerlink" title="7.3 添加 Gitalk 评论模块"></a>7.3 添加 Gitalk 评论模块</h2><p>首先去这个地方看一下 Gitalk 的效果吧！<a href="https://gitalk.github.io/">传送门</a></p><p>安装步骤如下：</p><ol><li><strong>注册 OAuth Application</strong></li></ol><p>当别人评论你的文章时，会需要它是授权。点击<a href="https://github.com/settings/applications/new">注册 OAuth Application</a> 进行注册，注册界面如下：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115154248.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115154248.png" alt="img"></a></p><p>img</p><ul><li><strong>Application name：</strong>应用名称，自己随意起名。</li><li><strong>Homepage URL：</strong>博客主页地址，如果有域名，此处填写域名，无域名，填写你的默认 github 地址：如 <code>https://username.github.io</code>。</li><li><strong>Application description：</strong>应用描述，可选，可以写也可以不写。</li><li><strong>Authorization callback URL：</strong>授权后返回的地址，需要与 <strong>Homepage URL</strong> 一致。</li></ul><p>点击 <strong>Register application</strong>（注册）会出现 <strong>Client ID/Secret</strong>，接下来就是将信息填入配置文件中。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115155054.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115155054.png" alt="img"></a></p><p>img</p><ol><li><strong>新建 GitHub 仓库</strong></li></ol><p>新建仓库就不在多说了，相信大家都会，如果不会的话，上面有写。</p><ol><li><strong>配置 _config.yml 文件</strong></li></ol><pre><code># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: true    # true即开启评论模块  owner: Yafine  # 填写你的 github 账户名即可  repo: Yafine-gitalks   # 新建一个仓库或者使用博客托管的仓库也可  oauth:    clientId: #填写你的clientId    clientSecret:  #填写你的clientSecret  admin: Yafine  #填写你的 github 账户名即可</code></pre><ol><li>然后再进行部署步骤即可，第一次查看效果需要登录 github 账号，关联授权后，就可以使用评论系统了。</li></ol><blockquote><p>友情提醒：开启这个评论系统会对主题中的表格有影响，所以根据个人喜好决定是否开启。</p></blockquote><h2 id="7-4-添加-Disqus-评论模块"><a href="#7-4-添加-Disqus-评论模块" class="headerlink" title="7.4 添加 Disqus 评论模块"></a>7.4 添加 Disqus 评论模块</h2><p>还在完善，这个貌似得通过特殊途径才能注册。有时间再写吧。</p><p>你也可以参考这位作者的文档，作者自己搭建的代理：<a href="https://disqusjs.skk.moe/">https://disqusjs.skk.moe/</a></p><h1 id="八、域名解析与绑定"><a href="#八、域名解析与绑定" class="headerlink" title="八、域名解析与绑定"></a>八、域名解析与绑定</h1><p>域名的购买流程我就不说了，相信大家应该都会购买吧，一般都会去阿里云或者腾讯云购买域名。下面就简单的说一下，如何绑定域名并进行解析。</p><p>在这里以腾讯云解析为例（我的域名是在腾讯云购买的），登录腾讯云的控制台，进入到域名管理页面，然后点击解析，进行域名的解析，如下图所示：</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205232306.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205232306.png" alt="img"></a></p><p>img</p><p>进入云解析列表，添加记录值如下图所示：</p><p>IP 地址可以提供 cmd 命令得到，命令为 <strong>ping username.github.com</strong>，会得到来自 <code>xxx.xxx.xxx.xxx</code> 的回复，这个就是 github 的 IP 地址，将得到的 IP 地址填入记录值即可，如下图所示。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205231816.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205231816.png" alt="img"></a></p><p>img</p><blockquote><p>上面第一个行的线路类型第一次先选择默认，上面的境外路线，这是我后来配置的双部署，国内访问走 coding 路线，国外访问走 GitHub 路线。</p></blockquote><p><strong>说明：</strong></p><p>以我的域名为例：yafine-blog.cn</p><blockquote><p><strong>提示：</strong>要解析 <code>www.yafine-blog.cn</code>，请填写 www。主机记录就是域名前缀，常见用法如下：</p></blockquote><table><thead><tr><th>主机记录</th><th>说明</th></tr></thead><tbody><tr><td>www</td><td>解析后的域名为 <code>www.yafine-blog.cn</code></td></tr><tr><td>@</td><td>直接解析主域名 yafine-blog.cn</td></tr><tr><td>*</td><td>泛解析，匹配其他所有域名 *.yafine-blog.cn</td></tr><tr><td>mail</td><td>将域名解析为 mail.yafine-blog.cn，通常用于解析邮箱服务器</td></tr><tr><td>二级域名</td><td>如 abc.yafine-blog.cn，填写 abc</td></tr><tr><td>手机网站</td><td>如 m.yafine-blog.cn，填写 m</td></tr></tbody></table><blockquote><p><strong>提示:</strong></p><p>将域名指向云服务器，请选择<strong>「A」</strong>； 将域名指向另一个域名，请选择<strong>「CNAME」</strong>； 建立邮箱请选择<strong>「MX」</strong>，根据邮箱服务商提供的 MX 记录填写。</p></blockquote><table><thead><tr><th>记录类型</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>用来指定域名的 IPv4 地址（如 8.8.8.8），如果需要将域名指向一个 IP 地址，就需要添加 A 记录。</td></tr><tr><td>CNAME</td><td>如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</td></tr><tr><td>MX</td><td>如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。</td></tr><tr><td>TXT</td><td>在这里可以填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 记录（反垃圾邮件）</td></tr><tr><td>NS</td><td>域名服务器记录，如果需要将子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。</td></tr><tr><td>AAAA</td><td>用来指定主机名（或域名）对应的 IPv6 地址（例如：ff06:0:0:0:0:0:0:c3）记录。</td></tr><tr><td>SRV</td><td>记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。</td></tr><tr><td>显性 URL</td><td>从一个地址 301 重定向到另一个地址的时候，就需要添加显性 URL 记录（注：DNSPod 目前只支持 301 重定向）。</td></tr><tr><td>隐性 URL</td><td>类似于显性 URL，区别在于隐性 URL 不会改变地址栏的域名。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：在这之前需要在站点根目录的 source 目录下新建一个 CNAME 文件，里面写入自己的域名，然后保存，在进行如下的步骤。这样到最后当你在地址栏输入 xxx.github.io 时，才会自动跳转到你的域名。</p></blockquote><p>然后在你的 GitHub 仓库的设置里找到这个页面，将你的域名填到 Custom domain 选项下，强制开启 https，即当你在地址栏输入域名，会自动识别域名为 https 开头。然后进行保存。</p><p><a href="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205230514.png"><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20191205230514.png" alt="img"></a></p><p>img</p><h1 id="九、-博客优化"><a href="#九、-博客优化" class="headerlink" title="九、 博客优化"></a>九、 博客优化</h1><h2 id="1-图片懒加载"><a href="#1-图片懒加载" class="headerlink" title="1. 图片懒加载"></a>1. 图片懒加载</h2><blockquote><p><strong>知识小课堂：</strong>图片加载方式有两种，一个是预加载，另一个就是懒加载，那你了解什么是预加载和懒加载吗？下面来学习一下。</p><p>参考：<a href="https://blog.csdn.net/alex8046/article/details/50388050">图片预加载与图片懒加载（缓载）的区别与实现</a></p></blockquote><ul><li>图片预加载：顾名思义，图片预加载就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，这样浏览者可能以为图片预览慢而没兴趣浏览，把网页关掉，这时，就需要图片预加载。当然这种做法实际上牺牲了服务器的性能换取了更好的用户体验。</li><li>图片懒加载（缓载）：延迟加载图片或符合某些条件时才加载某些图片。这样做的好处是减少不必要的访问数据库或延迟访问数据库的次数，因为每次访问数据库都是比较耗时的即只有真正使用该对象的数据时才会创建。懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。</li></ul><p><strong>预加载与懒加载的区别之处：</strong></p><p>两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预载则会增加服务器前端压力。</p><p>使用图片懒加载需要安装插件：<a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></p><p>在站点根目录执行下面的命令：</p><pre><code>npm install hexo-lazyload-image --save</code></pre><p>之后在站点配置文件下添加下面的代码：</p><pre><code>lazyload:  enable: true  # 是否开启图片懒加载  onlypost: false  # 是否只对文章的图片做懒加载  loadingImg: # eg ./images/loading.gif</code></pre><p>最后执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 就可以看到效果了。</p><p>注意，以下几个小问题针对 matery 主题而言，其他主题是否会出现以下情况目前我也不清楚，如果出现，你在尝试下以下解决方法。(暴力解决法，而不是直接修改懒加载插件😂😂😂)</p><ul><li>问题 1：查看大图，发现全部为 loading 加载图，原因是因为懒加载插件与 <strong>lightgallery 插件</strong>冲突，解决办法如下：</li></ul><p>修改主题文件下的 <strong>matery.js</strong>，在 108 行左右添加以下代码：</p><pre><code>$(document).find(&#39;img[data-original]&#39;).each(function()&#123;    $(this).parent().attr(&quot;href&quot;, $(this).attr(&quot;data-original&quot;));&#125;);</code></pre><ul><li>问题 2：点击首页 <strong>logo</strong> 不是跳转到首页，而是查看 <strong>logo</strong> 图片，解决办法如下：</li></ul><p>修改主题的 <strong>header.ejs</strong> 文件，原代码为：</p><pre><code>&lt;div class=&quot;brand-logo&quot;&gt;    &lt;a href=&quot;&lt;%- url_for() %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt;         &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) &#123; %&gt;         &lt;img src=&quot;&lt;%= theme.logo %&gt;&quot; class=&quot;logo-img&quot; alt=&quot;LOGO&quot;&gt;         &lt;% &#125; %&gt;         &lt;span class=&quot;logo-span&quot;&gt;&lt;%- config.title %&gt;&lt;/span&gt;    &lt;/a&gt;&lt;/div&gt;</code></pre><p>修改为：</p><pre><code>&lt;div class=&quot;brand-logo&quot;&gt;    &lt;a href=&quot;&lt;%- url_for() %&gt;&quot; class=&quot;waves-effect waves-light&quot;&gt;        &lt;div&gt;            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) &#123; %&gt;            &lt;img src=&quot;&lt;%= theme.logo %&gt;&quot; class=&quot;logo-img&quot; alt=&quot;LOGO&quot;&gt;            &lt;% &#125; %&gt;            &lt;span class=&quot;logo-span&quot;&gt;&lt;%- config.title %&gt;&lt;/span&gt;        &lt;/div&gt;    &lt;/a&gt;&lt;/div&gt;</code></pre><h3 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h3><blockquote><p>经过以上操作就已经很完美了，以下内容可做可不做</p></blockquote><ul><li><p>其实第一次加载后本地都是有缓存的，如果每次都把 loading 显示出来就不那么好看</p></li><li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p></li><li><p>打开 <code>Hexo根目录</code> &gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p></li><li><p>第 9 行修改为：</p><pre><code>&amp;&amp; rect.top &lt;= (window.innerHeight +240 || document.documentElement.clientHeight +240)</code></pre></li><li><p>作用：提前 240 个像素加载图片；当然这个值也可以根据自己情况修改</p></li></ul><blockquote><p>参考：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-5">https://blog.sky03.cn/posts/42790.html#toc-heading-5</a></p></blockquote><h2 id="2-代码压缩"><a href="#2-代码压缩" class="headerlink" title="2. 代码压缩"></a>2. 代码压缩</h2><h3 id="方法一：gulp-代码压缩"><a href="#方法一：gulp-代码压缩" class="headerlink" title="方法一：gulp 代码压缩"></a>方法一：gulp 代码压缩</h3><p>因为 hexo 生成的 html、css、js 等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的 “压缩”。</p><p>有人说空格换行能占多少字节？确实占不了多少，但是一个人访问是这么多字节，那么一百人，一万人呢？加起来这量就不少了吧，这都是流量啊！这也是很多 css/js 文件的后缀为*.min.js 或*.min.css 的原因。虽然我们可能没那么多访问量，但是能减小一点资源文件的大小也是对访问速度有那么一点提升的。</p><p>我们采用 gulp 代码压缩方式。</p><p><strong>使用方法：</strong></p><ol><li>进入站点根目录下依次执行下面的命令：</li></ol><pre><code># 全局安装gulp模块npm install gulp -g# 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save# 额外的功能模块npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre><ol><li>在 Hexo 根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为 <code>gulpfile.js</code>，否则会出错！）</li></ol><pre><code>var gulp = require(&quot;gulp&quot;);var debug = require(&quot;gulp-debug&quot;);var cleancss = require(&quot;gulp-clean-css&quot;); //css压缩组件var uglify = require(&quot;gulp-uglify&quot;); //js压缩组件var htmlmin = require(&quot;gulp-htmlmin&quot;); //html压缩组件var htmlclean = require(&quot;gulp-htmlclean&quot;); //html清理组件var imagemin = require(&quot;gulp-imagemin&quot;); //图片压缩组件var changed = require(&quot;gulp-changed&quot;); //文件更改校验组件var gulpif = require(&quot;gulp-if&quot;); //任务 帮助调用组件var plumber = require(&quot;gulp-plumber&quot;); //容错组件（发生错误不跳出任务，并报出错误内容）var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)var isDebug = true; //是否调试显示 编译通过的文件var gulpBabel = require(&quot;gulp-babel&quot;);var es2015Preset = require(&quot;babel-preset-es2015&quot;);var del = require(&quot;del&quot;);var Hexo = require(&quot;hexo&quot;);var hexo = new Hexo(process.cwd(), &#123;&#125;); // 初始化一个hexo对象// 清除public文件夹gulp.task(&quot;clean&quot;, function () &#123;    return del([&quot;public/**/*&quot;]);&#125;);// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return// 创建静态页面 （等同 hexo generate）gulp.task(&quot;generate&quot;, function () &#123;    return hexo.init().then(function () &#123;        return hexo            .call(&quot;generate&quot;, &#123;                watch: false            &#125;)            .then(function () &#123;                return hexo.exit();            &#125;)            .catch(function (err) &#123;                return hexo.exit(err);            &#125;);    &#125;);&#125;);// 启动Hexo服务器gulp.task(&quot;server&quot;, function () &#123;    return hexo        .init()        .then(function () &#123;            return hexo.call(&quot;server&quot;, &#123;&#125;);        &#125;)        .catch(function (err) &#123;            console.log(err);        &#125;);&#125;);// 部署到服务器gulp.task(&quot;deploy&quot;, function () &#123;    return hexo.init().then(function () &#123;        return hexo            .call(&quot;deploy&quot;, &#123;                watch: false            &#125;)            .then(function () &#123;                return hexo.exit();            &#125;)            .catch(function (err) &#123;                return hexo.exit(err);            &#125;);    &#125;);&#125;);// 压缩public目录下的js文件gulp.task(&quot;compressJs&quot;, function () &#123;    return gulp        .src([&quot;./public/**/*.js&quot;, &quot;!./public/libs/**&quot;]) //排除的js        .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress JS:&quot; &#125;)))        .pipe(plumber())        .pipe(            gulpBabel(&#123;                presets: [es2015Preset] // es5检查机制            &#125;)        )        .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩        .pipe(gulp.dest(&quot;./public&quot;)); //输出到目标目录&#125;);// 压缩public目录下的css文件gulp.task(&quot;compressCss&quot;, function () &#123;    var option = &#123;        rebase: false,        //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]        compatibility: &quot;ie7&quot; //保留ie7及以下兼容写法 类型：String 默认：&#39;&#39;or&#39;*&#39; [启用兼容模式； &#39;ie7&#39;：IE7兼容模式，&#39;ie8&#39;：IE8兼容模式，&#39;*&#39;：IE9+兼容模式]        //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]        //keepSpecialComments: &#39;*&#39; //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    &#125;;    return gulp        .src([&quot;./public/**/*.css&quot;, &quot;!./public/**/*.min.css&quot;]) //排除的css        .pipe(gulpif(!isScriptAll, changed(&quot;./public&quot;)))        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress CSS:&quot; &#125;)))        .pipe(plumber())        .pipe(cleancss(option))        .pipe(gulp.dest(&quot;./public&quot;));&#125;);// 压缩public目录下的html文件gulp.task(&quot;compressHtml&quot;, function () &#123;    var cleanOptions = &#123;        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理        unprotect: /&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/gi //特殊处理    &#125;;    var minOption = &#123;        collapseWhitespace: true, //压缩HTML        collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;        removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;        removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot;        removeStyleLinkTypeAttributes: true, //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;        removeComments: true, //清除HTML注释        minifyJS: true, //压缩页面JS        minifyCSS: true, //压缩页面CSS        minifyURLs: true //替换页面URL    &#125;;    return gulp        .src(&quot;./public/**/*.html&quot;)        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress HTML:&quot; &#125;)))        .pipe(plumber())        .pipe(htmlclean(cleanOptions))        .pipe(htmlmin(minOption))        .pipe(gulp.dest(&quot;./public&quot;));&#125;);// 压缩 public/medias 目录内图片gulp.task(&quot;compressImage&quot;, function () &#123;    var option = &#123;        optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）        progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片        interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染        multipass: false //类型：Boolean 默认：false 多次优化svg直到完全优化    &#125;;    return gulp        .src(&quot;./public/medias/**/*.*&quot;)        .pipe(gulpif(!isScriptAll, changed(&quot;./public/medias&quot;)))        .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress Images:&quot; &#125;)))        .pipe(plumber())        .pipe(imagemin(option))        .pipe(gulp.dest(&quot;./public&quot;));&#125;);// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器gulp.task(    &quot;build&quot;,    gulp.series(        &quot;clean&quot;,        &quot;generate&quot;,        &quot;compressHtml&quot;,        &quot;compressCss&quot;,        &quot;compressJs&quot;,        &quot;compressImage&quot;,        gulp.parallel(&quot;deploy&quot;)    ));// 默认任务gulp.task(    &quot;default&quot;,    gulp.series(        &quot;clean&quot;,        &quot;generate&quot;,        gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;,&quot;compressImage&quot;)    ));//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</code></pre><ol><li>以后的执行方式有两种：</li></ol><ul><li>直接在 Hexo 根目录执行 <code>gulp</code> 或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 <code>gulp build</code> ，这个命令与第 1 种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ul><blockquote><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第 154 行的 <code>&quot;compressImage&quot;,</code> 和第 165 行的 <code>,&quot;compressImage&quot;</code> 去掉即可</p></blockquote><h3 id="方法二：hexo-neat-插件实现代码压缩"><a href="#方法二：hexo-neat-插件实现代码压缩" class="headerlink" title="方法二：hexo-neat 插件实现代码压缩"></a>方法二：hexo-neat 插件实现代码压缩</h3><p>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a> 插件也是用来压缩代码的，底层也是通过 gulp 来实现的。</p><p>但是这个插件是有 Bug 的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul><p>在博客站点根目录执行安装代码：</p><pre><code>npm install hexo-neat --save</code></pre><p>紧接着在站点根目录下的配置文件添加如下代码：</p><pre><code>neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - &#39;*.min.css&#39;neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - &#39;*.min.js&#39;</code></pre><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p><p><strong>补充</strong>：为了解决以上 Bug，<strong>对于 matery 主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p><pre class="line-numbers language-js"><code class="language-js">#hexo<span class="token operator">-</span>neat 优化提速插件（去掉HTML、css、js的blank字符）neat_enable<span class="token punctuation">:</span> <span class="token boolean">true</span>neat_html<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  exclude<span class="token punctuation">:</span>    <span class="token operator">-</span> <span class="token string">'**/*.md'</span>neat_css<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  exclude<span class="token punctuation">:</span>    <span class="token operator">-</span> <span class="token string">'**/*.min.css'</span>neat_js<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  mangle<span class="token punctuation">:</span> <span class="token boolean">true</span>  output<span class="token punctuation">:</span>  compress<span class="token punctuation">:</span>  exclude<span class="token punctuation">:</span>    <span class="token operator">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token operator">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token operator">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CDN-加速"><a href="#3-CDN-加速" class="headerlink" title="3. CDN 加速"></a>3. CDN 加速</h2><blockquote><p>请看我的另一篇博客文章：<a href="https://yafine-blog.cn/posts/ee35.html">https://yafine-blog.cn/posts/ee35.html</a></p></blockquote><h2 id="4-打造稳定快速、高效免费图床"><a href="#4-打造稳定快速、高效免费图床" class="headerlink" title="4. 打造稳定快速、高效免费图床"></a>4. 打造稳定快速、高效免费图床</h2><blockquote><p>请移步另一篇博文：<a href="https://yafine-blog.cn/posts/eb3a.html">https://yafine-blog.cn/posts/eb3a.html</a></p></blockquote><h1 id="十、SEO-优化"><a href="#十、SEO-优化" class="headerlink" title="十、SEO 优化"></a>十、SEO 优化</h1><blockquote><p>请参考这篇博文：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18">https://blog.sky03.cn/posts/42790.html#toc-heading-18</a></p></blockquote><h1 id="十一、部署到-Coding-和码云"><a href="#十一、部署到-Coding-和码云" class="headerlink" title="十一、部署到 Coding 和码云"></a>十一、部署到 Coding 和码云</h1><blockquote><p>请参考我的另一篇文章：<a href="https://yafine-blog.cn/posts/51fb.html">https://yafine-blog.cn/posts/51fb.html</a></p></blockquote><h1 id="十二、新建文章自动打开本地-Markdown-编辑器"><a href="#十二、新建文章自动打开本地-Markdown-编辑器" class="headerlink" title="十二、新建文章自动打开本地 Markdown 编辑器"></a>十二、新建文章自动打开本地 Markdown 编辑器</h1><p>写新文章时，需要控制台执行 <code>hexo new &quot;文章名字&quot;</code>，这样就会在<code>_posts</code> 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path)&amp;#123;</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//&amp;#125;);</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typora\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>&quot;D:\Program Files\Typorae\Typora.exe&quot;</code> 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 <code>hexo cl &amp;&amp; hexo g -d</code>，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><p><strong>文章参考来源</strong></p><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery 主题文档</a></li><li><a href="https://blog.licardo.cn/posts/11199/">Matery 主题配置豆瓣插件</a></li><li><a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">Hexo 博客主题个性化</a></li><li><a href="https://blog.sky03.cn/posts/42790.html">Hexo 进阶之各种优化</a></li><li><a href="https://blog.hvnobug.com/post/hexo-optimize.html">hexo 博客美化</a></li></ul><iframe name="easyXDM_default268_provider" id="easyXDM_default268_provider" src="https://embed.widgetpack.com/widget/xdm/index.html?xdm_e=https%3A%2F%2Fyafine-blog.cn&amp;xdm_c=default268&amp;xdm_p=1" frameborder="0" style="box-sizing: border-box; outline: none; margin: 0px; padding: 0px; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: absolute !important; top: -2000px !important; left: 0px !important;"></iframe> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的私有云盘</title>
      <link href="2020/02/03/da-jian-zi-ji-de-si-you-yun-pan/"/>
      <url>2020/02/03/da-jian-zi-ji-de-si-you-yun-pan/</url>
      
        <content type="html"><![CDATA[<p>使用的系统是Linux Centos7.6<br>1、搭建LAMP网站架构<br>2、升级PHP5.4到PHP5.6<br>3、安装PHP扩展模块<br>4、实战1：使用Nextcloud建立属于自己私有的云存储网盘（百度网盘）<br>5、实战2：实现加密对外分享文件和在线播放小电影： 桃谷.avi</p><hr><h2 id="Nextcloud概述："><a href="#Nextcloud概述：" class="headerlink" title="Nextcloud概述："></a>Nextcloud概述：</h2><p>Nextcloud 一款文件主机服务软件，就是我们平时使用的云存储，不过这是在自己主机的服务器上建立属于自己的私有云，Nextcloud　使用AGPLv3协议发布。本项目是基于PHP和SQLite，MySQL，Oracle或PostgreSQL数据库，所以它可以运行在所有的平台上<br>nextcloud 是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像 百度云那样实现文件跨平台同步、共享、版本控制、团队协作等等。nextcloud 能让你将所有的文件掌握在自己的手中，只要你的设备性能和空间充足，那么用起来几乎没有任何限制。<br>nextcloud 跨平台支持 Windows、Mac、Android、iOS、Linux 等平台，而且还提供了网页版和 WebDAV 形式访问，因此你可以在任何电脑、手机上都能轻松获取你的文件了。</p><hr><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="1、需要LAMP架构"><a href="#1、需要LAMP架构" class="headerlink" title="1、需要LAMP架构"></a>1、需要LAMP架构</h2><pre class="line-numbers language-shell"><code class="language-shell">  yum install  -y  httpd php php-mysql mariadb-server mariadb sqlite php-dom php-mbstring php-gd php-pdo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>注：<br>httpd #apache web 服务器<br>php #php<br>mariadb-server mariadb # 从centos 7开始，系统中自带的mysql数据库，更名为 mariadb-server 。<br>PDO（PHP数据对象） 是一个轻量级的、具有兼容接口的PHP数据连接拓展</p><hr><h2 id="2、开LAMP相关服务"><a href="#2、开LAMP相关服务" class="headerlink" title="2、开LAMP相关服务"></a>2、开LAMP相关服务</h2><pre class="line-numbers language-shell"><code class="language-shell"> systemctl start httpd.service   systemctl start mariadb.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="3、关闭防火墙-和selinux"><a href="#3、关闭防火墙-和selinux" class="headerlink" title="3、关闭防火墙 和selinux"></a>3、关闭防火墙 和selinux</h2><pre class="line-numbers language-shell"><code class="language-shell"> getenforce Disabled iptables -F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>4、在搭建好的LAMP环境上部署 nextcloud 站点<br>下载解压源码包，并移动到网站根目录下<br>通过xshell中的rz上传nextcloud-10.0.1.zip 到linux系统中：</p><hr><pre class="line-numbers language-shell"><code class="language-shell"> unzip nextcloud-10.0.1.zip cp -r nextcloud/*   /var/www/html/ chown -R apache.apache /var/www/html/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>5、在MariaDB数据库中创建nextcloud的数据库：<br>设置mysql的root密码：</p><hr><pre class="line-numbers language-shell"><code class="language-shell"> mysqladmin -u root password "123456" mysql -u root -p123456 MariaDB [(none)]> create database nextcloud;    #创建nextcloud数据库: exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="三、通过web界面安装nextcloud"><a href="#三、通过web界面安装nextcloud" class="headerlink" title="三、通过web界面安装nextcloud"></a>三、通过web界面安装nextcloud</h1><hr><pre><code> http://192.168.x.xx/index.php</code></pre><hr><p>但是网页提示当前php版本是5.4，要求高于7.0，所以要更新php版本</p><h2 id="更新php"><a href="#更新php" class="headerlink" title="更新php"></a>更新php</h2><p>更新源</p><hr><pre class="line-numbers language-shell"><code class="language-shell">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm   rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>移除系统自带的php-common</p><hr><pre class="line-numbers language-shell"><code class="language-shell">yum remove php-common -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装依赖包</p><hr><pre class="line-numbers language-shell"><code class="language-shell">yum install -y php72w php72w-opcache php72w-xml php72w-mcrypt php72w-gd php72w-devel php72w-mysql php72w-intl php72w-mbstringphp -v #查看版本 systemctl restart httpd #重启apache  让php5.6 的配置文件生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展:"></a>扩展:</h2><p>SQLite数据库概述：<br>SQLite是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它是D.RichardHipp建立的公有领域项目。它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。</p><hr><pre class="line-numbers language-shell"><code class="language-shell"> 用户名： admin   密码： 123456 接下来输入数据库的用户： root  密码： 123456 数据库名： nextcloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="接下来自动化安装"><a href="#接下来自动化安装" class="headerlink" title="接下来自动化安装"></a>接下来自动化安装</h2><p>安装完后，使用admin 密码： 123456 登录系统<br>安装好之后<br>在web版本上上传文档<br>上传视频，实现在播放<br>分享我的文档<br>输入正确的密码就可以了<br>在线播放或下载都可以</p><hr><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>比如files相关的<br>加载插件右击选项<br>可以进行相应的操作，更多插件可以去发现哟。。。。。！</p><p>来源: MX<br>文章作者: Ming xin<br>文章链接: <a href="https://mx142.cn/2020/07/01/4/">https://mx142.cn/2020/07/01/4/</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="2019/10/28/404/"/>
      <url>2019/10/28/404/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>等值线法解一类向量题</title>
      <link href="2019/08/07/deng-zhi-xian-fa-jie-yi-lei-xiang-liang-ti/"/>
      <url>2019/08/07/deng-zhi-xian-fa-jie-yi-lei-xiang-liang-ti/</url>
      
        <content type="html"><![CDATA[<p>-</p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/AAE970F672A2CF98432D62F4F45EBF44AEA1F70F_size74_w604_h883.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/B110FD1B574955DDA3FF74792E388E395FC45448_size64_w595_h911.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/30C8357D2A5327B076E668F01B786F28A35C1912_size57_w574_h886.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/E110BFDEC9353B937C370C00A2B9A8305A5D8843_size20_w513_h347.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/FDF7B727FCBFC13A8F476242AF44A376D8045262_size51_w579_h885.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/647EFF797B522BCA7999743F58CF847F39B6F896_size40_w586_h854.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/C6E9B64F405F8EDDE2E5FD7B0144F56FE40A41D4_size47_w588_h880.jpeg" alt="《等值线法解一类向量题》"></p><p><img src="http://p0.ifengimg.com/pmop/2018/0726/E70C272B7549F42FB9A39218D9AA610B6B463558_size45_w578_h873.jpeg" alt="《等值线法解一类向量题》"></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>上海电信所发中兴F450G光猫破解方法</title>
      <link href="2019/07/29/shang-hai-dian-xin-suo-fa-zhong-xing-f450g-guang-mao-po-jie-fang-fa/"/>
      <url>2019/07/29/shang-hai-dian-xin-suo-fa-zhong-xing-f450g-guang-mao-po-jie-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>今天电信把14年发的旧的烽火HG220G光猫换成了新的中兴F450G光猫。然而useradmin权限依旧很少，没有IP-MAC绑定，没有端口映射，这怎么行，必定还是要像之前那个光猫一样破解掉，记录一下破解过程。</p><p>根据网上的一些资料，连上光纤后光猫会自动关闭Telnet，而Telnet是唯一不拆机破解光猫的途径。好在机身的复位键不会清除注册信息，于是首先果断</p><p>1、拔光纤，长按复位键</p><p>2、电脑Telnet连接光猫，使用用户名root，密码Zte521登录</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161451.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161451-300x119.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>很棒，连接成功。</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161509.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161509-300x111.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>3、执行sendcmd 1 DB p DevAuthInfo即可查看telecomadmin超级管理员密码</p><blockquote><p>&lt;Tbl name=”DevAuthInfo” RowCount=”6″&gt;<br>&lt;Row No=”0″&gt;<br>&lt;DM name=”ViewName” val=”IGD.AU1″/&gt;<br>&lt;DM name=”Enable” val=”1″/&gt;<br>&lt;DM name=”IsOnline” val=”0″/&gt;<br>&lt;DM name=”AppID” val=”1″/&gt;<br><DM name="User" val="telecomadmin"/><br>&lt;DM name=”Pass” val=”ND……</p></blockquote><p>使用此密码登录，又见到了熟悉的超级管理员界面(´▽`) 舒爽</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005163156.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005163156-300x124.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>4、不过为了长久之计，以后连上光纤也要能Telnet登录随时管理，于是执行sendcmd 1 DB set TelnetCfg 0 Lan_EnableAfterOlt 1，可以看到前后这个值有所变化</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161835.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161835.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>5、根据指令格式我推测出了修改Telnet密码的指令<img src="https://tiny.zhouii.com/qqemoji/e248.gif" alt="《上海电信所发中兴F450G光猫破解方法》">sendcmd 1 DB set TelnetCfg 0 TSLan_UPwd root</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161913.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005161913-300x200.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>6、修改完绝对不能忘了执行sendcmd 1 DB save和sendcmd 1 DB reboot指令进行保存</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005162350.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005162350-300x283.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>7、重启光猫，在连上光纤能上网的情况下也能Telnet登录光猫啦使用的还是修改后的密码root</p><p><a href="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005163048.jpg"><img src="https://www.zhouii.com/blog/wp-content/uploads/2018/10/20181005163048.jpg" alt="《上海电信所发中兴F450G光猫破解方法》"></a></p><p>其实光猫是支持telnet登录的，并且这个功能默认开启，很可惜的是一旦插上光纤后，这个功能就会自动关闭。</p><p>所以在上面的基础之上，还可以做一些更多的设置，方便日后的折腾，参考下面这些命令</p><pre><code>1，打开telnetsendcmd 1 DB set TelnetCfg 0 TS_Enable 12，打开23端口sendcmd 1 DB set PortControl 3 PortEnable 13，局域网登录允许sendcmd 1 DB set TelnetCfg 0 Lan_Enable 14，插上光纤后不自动关闭telnetsendcmd 1 DB set TelnetCfg 0 Lan_EnableAfterOlt 15，最多能够登录5个用户，避免被锁死sendcmd 1 DB set TelnetCfg 0 Max_Con_Num 56，破解最大用户数(本例设置为32，然后关闭了限制)sendcmd 1 DB set CltLmt 8 Max 32sendcmd 1 DB set CltLmt 8 Enable 07，无论进行了任何指令设置，需要使用以下命令保存配置sendcmd 1 DB savesendcmd 1 DB reboot</code></pre><p>打开telenet后，日后可以直接用telnet登录路由器，用户名是<code>root</code>，密码是<code>Zte521</code>。</p><p>此外还有额外的命令我没有操作，有兴趣的自己研究下咯</p><pre><code>破解打开网页自动跳转LOID注册页面（适用于手工配置，无法LOID注册的同学）sendcmd 1 DB set PDTCTUSERINFO 0 Status 0sendcmd 1 DB set PDTCTUSERINFO 0 Result 1</code></pre><p>转自 <a href="https://www.zhouii.com/2018/10/646.html">01的翼</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GOOGLE PLAY 礼品卡收集</title>
      <link href="2018/09/07/google-play-li-pin-qia-ji-he/"/>
      <url>2018/09/07/google-play-li-pin-qia-ji-he/</url>
      
        <content type="html"><![CDATA[<p>美国礼品卡</p><p>0PT6 2EZZ GP05 SCL1 N03N</p><p>2M7J 2LPC U7K6 2QK6 U54G</p><p>日本礼品卡</p><p>1TPCKXULTB6M4Y5</p><p>2ZL03X08XF50PD21LBM3</p><p>巴西地区GooglePlay礼品卡</p><p>2BNB FCAG 5BRS 47N1 L592</p><p>香港谷歌礼品卡</p><p>7EX9 6W9X GRNG T90E 8WJ6</p>]]></content>
      
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的UI素材库收藏</title>
      <link href="2018/04/20/hao-yong-de-ui-su-cai-wang-zhan-shou-cang/"/>
      <url>2018/04/20/hao-yong-de-ui-su-cai-wang-zhan-shou-cang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://material.io/">Homepage – Material Design</a></p><p>[Android Asset Studio – Action bar/tab icon generator](<a href="https://romannurik.github.io/AndroidAssetStudio/icons-actionbar.html#source.type=clipart&amp;source.clipart=add_circle&amp;source.space.trim=0&amp;source.space.pad=0&amp;name=ic_action_add_circle&amp;theme=light&amp;color=rgba">https://romannurik.github.io/AndroidAssetStudio/icons-actionbar.html#source.type=clipart&amp;source.clipart=add_circle&amp;source.space.trim=0&amp;source.space.pad=0&amp;name=ic_action_add_circle&amp;theme=light&amp;color=rgba</a>(33%2C 150%2C 243%2C 0.6))</p><p><a href="https://icons8.cn/icons/material">免费Material Design图标</a></p><p><a href="https://www.iconfont.cn/search/index?q=%E7%94%BB%E7%AC%94">Iconfont-阿里巴巴矢量图标库（非常好用，推荐）</a></p><p><a href="https://www.uplabs.com/posts/tool/xd">Adobe XD Downloadable Resources – UpLabs</a></p>]]></content>
      
      
      <categories>
          
          <category> UI DESIGN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
